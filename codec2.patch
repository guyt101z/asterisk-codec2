--- include/asterisk/format_cache.h	(Asterisk 13.10.0)
+++ include/asterisk/format_cache.h	(working copy)
@@ -226,2 +226,7 @@
 /*!
+ * \brief Built-in cached Codec 2 format.
+ */
+extern struct ast_format *ast_format_codec2;
+
+/*!
  * \brief Initialize format cache support within the core.
--- main/codec_builtin.c	(Asterisk 13.10.0)
+++ main/codec_builtin.c	(working copy)
@@ -774,2 +774,26 @@
 
+static int codec2_samples(struct ast_frame *frame)
+{
+	return 160 * (frame->datalen / 6);
+}
+
+static int codec2_length(unsigned int samples)
+{
+	return (samples / 160) * 6;
+}
+
+static struct ast_codec codec2 = {
+	.name = "codec2",
+	.description = "Codec 2",
+	.type = AST_MEDIA_TYPE_AUDIO,
+	.sample_rate = 8000,
+	.minimum_ms = 20,
+	.maximum_ms = 300,
+	.default_ms = 20,
+	.minimum_bytes = 6,
+	.samples_count = codec2_samples,
+	.get_length = codec2_length,
+	.smooth = 1,
+};
+
 #define CODEC_REGISTER_AND_CACHE(codec) \
@@ -806,2 +830,4 @@
 
+	res |= CODEC_REGISTER_AND_CACHE(codec2);
+
 	res |= CODEC_REGISTER_AND_CACHE(g723);
--- main/format_cache.c	(Asterisk 13.10.0)
+++ main/format_cache.c	(working copy)
@@ -220,2 +220,7 @@
 /*!
+ * \brief Built-in cached Codec 2 format.
+ */
+struct ast_format *ast_format_codec2;
+
+/*!
  * \brief Built-in cached t140 format.
@@ -294,2 +299,4 @@
 
+	ao2_replace(ast_format_codec2, NULL);
+
 	ao2_replace(ast_format_g723, NULL);
@@ -350,3 +357,5 @@
 {
-	if (!strcmp(name, "g723")) {
+	if (!strcmp(name, "codec2")) {
+		ao2_replace(ast_format_codec2, format);
+	} else if (!strcmp(name, "g723")) {
 		ao2_replace(ast_format_g723, format);
--- main/rtp_engine.c	(Asterisk 13.10.0)
+++ main/rtp_engine.c	(working copy)
@@ -2201,2 +2201,4 @@
 
+	set_next_mime_type(ast_format_codec2, 0,  "audio", "CODEC2", 8000);
+
	/* Define the static rtp payload mappings */
@@ -2244,2 +2246,4 @@
 	add_static_payload(107, ast_format_opus, 0);
+
+	add_static_payload(-1, ast_format_codec2, 0);
 
